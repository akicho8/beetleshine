{"version":3,"file":"xassertion.js","names":["_lodash","_interopRequireDefault","require","_xobject","obj","__esModule","_typeof","Symbol","iterator","constructor","prototype","Xassertion","assert","value","message","arguments","length","undefined","console","error","concat","assert_debugger","assert_equal","expected","actual","assert_kind_of_integer","Number","isInteger","assert_kind_of_string","assert_kind_of_array","_","isArray","assert_kind_of_hash","assert_kind_of_object","assert_present","Xobject","present_p","assert_blank","blank_p","assert_nonzero","v","_message","window","alert","Error","exports"],"sources":["../src/xassertion.js"],"sourcesContent":["import _ from \"lodash\"\nimport { Xobject } from \"./xobject.js\"\n\nexport const Xassertion = {\n  assert(value, message = null) {\n    if (!value) {\n      console.error(`${value}: ${message}`)\n      this.assert_debugger(message)\n    }\n  },\n\n  assert_equal(expected, actual, message = null) {\n    if (actual !== expected) {\n      console.error(`<${expected}> expected but was <${actual}>`)\n      this.assert_debugger(message)\n    }\n  },\n\n  assert_kind_of_integer(value, message = \"Assertion failed: not integer\") {\n    this.assert(Number.isInteger(value))\n  },\n\n  assert_kind_of_string(value, message = \"Assertion failed: not string\") {\n    this.assert_equal(\"string\", typeof value, message)\n  },\n\n  assert_kind_of_array(value, message = \"Assertion failed: not array\") {\n    this.assert(_.isArray(value), message)\n  },\n\n  assert_kind_of_hash(value, message = \"Assertion failed: not hash\") {\n    this.assert_equal(\"object\", typeof value, message)\n  },\n\n  assert_kind_of_object(value, message = \"Assertion failed: not object\") {\n    this.assert_equal(\"object\", typeof value, message)\n  },\n\n  assert_present(value, message = \"Assertion failed: blank\") {\n    this.assert(Xobject.present_p(value), message)\n  },\n\n  assert_blank(value, message = \"Assertion failed: present\") {\n    this.assert(Xobject.blank_p(value), message)\n  },\n\n  assert_nonzero(v, message = \"divided by 0\") {\n    this.assert(v !== 0, message)\n  },\n\n  // private\n\n  assert_debugger(message = null) {\n    debugger\n    message ??= \"Assertion failed\"\n    if (typeof window !== 'undefined') {\n      alert(message)\n    } else {\n      throw new Error(message)\n    }\n  },\n}\n"],"mappings":"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"}