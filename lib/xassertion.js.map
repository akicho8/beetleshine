{"version":3,"file":"xassertion.js","names":["Xassertion","__assert__","value","message","arguments","length","undefined","console","error","concat","__assert_show__","__assert_equal__","expected","actual","__assert_kind_of_integer__","Number","isInteger","__assert_kind_of_string__","_typeof","__assert_kind_of_array__","__assert_kind_of_hash__","__assert_kind_of_object__","__assert_nonzero__","v","_message","window","alert","Error","exports"],"sources":["../src/xassertion.js"],"sourcesContent":["export const Xassertion = {\n  __assert__(value, message = null) {\n    if (!value) {\n      console.error(`${value}: ${message}`)\n      this.__assert_show__(message)\n    }\n  },\n\n  __assert_equal__(expected, actual, message = null) {\n    if (actual !== expected) {\n      console.error(`<${expected}> expected but was <${actual}>`)\n      this.__assert_show__(message)\n    }\n  },\n\n  __assert_kind_of_integer__(value, message = null) {\n    this.__assert__(Number.isInteger(value))\n  },\n\n  __assert_kind_of_string__(value, message = null) {\n    this.__assert_equal__(\"string\", typeof value, message)\n  },\n\n  __assert_kind_of_array__(value, message = null) {\n    this.__assert_equal__(\"array\", typeof value, message)\n  },\n\n  __assert_kind_of_hash__(value, message = null) {\n    this.__assert_equal__(\"object\", typeof value, message)\n  },\n\n  __assert_kind_of_object__(value, message = null) {\n    this.__assert_equal__(\"object\", typeof value, message)\n  },\n\n  __assert_nonzero__(v, message = \"divided by 0\") {\n    this.__assert__(v !== 0, message)\n  },\n\n  // private\n\n  __assert_show__(message = null) {\n    message ??= \"Assertion failed\"\n    if (typeof window !== 'undefined') {\n      alert(message)\n    } else {\n      throw new Error(message)\n    }\n    debugger\n  },\n}\n"],"mappings":"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"}