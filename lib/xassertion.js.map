{"version":3,"file":"xassertion.js","names":["Xassertion","assert","value","message","arguments","length","undefined","console","error","concat","assert_debugger","assert_equal","expected","actual","assert_kind_of_integer","Number","isInteger","assert_kind_of_string","_typeof","assert_kind_of_array","assert_kind_of_hash","assert_kind_of_object","assert_nonzero","v","_message","window","alert","Error","exports"],"sources":["../src/xassertion.js"],"sourcesContent":["export const Xassertion = {\n  assert(value, message = null) {\n    if (!value) {\n      console.error(`${value}: ${message}`)\n      this.assert_debugger(message)\n    }\n  },\n\n  assert_equal(expected, actual, message = null) {\n    if (actual !== expected) {\n      console.error(`<${expected}> expected but was <${actual}>`)\n      this.assert_debugger(message)\n    }\n  },\n\n  assert_kind_of_integer(value, message = null) {\n    this.assert(Number.isInteger(value))\n  },\n\n  assert_kind_of_string(value, message = null) {\n    this.assert_equal(\"string\", typeof value, message)\n  },\n\n  assert_kind_of_array(value, message = null) {\n    this.assert_equal(\"array\", typeof value, message)\n  },\n\n  assert_kind_of_hash(value, message = null) {\n    this.assert_equal(\"object\", typeof value, message)\n  },\n\n  assert_kind_of_object(value, message = null) {\n    this.assert_equal(\"object\", typeof value, message)\n  },\n\n  assert_nonzero(v, message = \"divided by 0\") {\n    this.assert(v !== 0, message)\n  },\n\n  // private\n\n  assert_debugger(message = null) {\n    debugger\n    message ??= \"Assertion failed\"\n    if (typeof window !== 'undefined') {\n      alert(message)\n    } else {\n      throw new Error(message)\n    }\n  },\n}\n"],"mappings":"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"}