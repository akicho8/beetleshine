{"version":3,"file":"xassertion.js","names":["Xassertion","__assert__","value","message","arguments","length","undefined","console","error","__assert_show__","__assert_equal__","expected","actual","__assert_kind_of_integer__","Number","isInteger","__assert_kind_of_string__","__assert_kind_of_array__","__assert_kind_of_hash__","__assert_kind_of_object__","__assert_nonzero__","v","window","alert","Error","exports"],"sources":["../src/xassertion.js"],"sourcesContent":["export const Xassertion = {\n  __assert__(value, message = null) {\n    if (!value) {\n      console.error(`${value}: ${message}`)\n      this.__assert_show__(message)\n    }\n  },\n\n  __assert_equal__(expected, actual, message = null) {\n    if (actual !== expected) {\n      console.error(`<${expected}> expected but was <${actual}>`)\n      this.__assert_show__(message)\n    }\n  },\n\n  __assert_kind_of_integer__(value, message = null) {\n    this.__assert__(Number.isInteger(value))\n  },\n\n  __assert_kind_of_string__(value, message = null) {\n    this.__assert_equal__(\"string\", typeof value, message)\n  },\n\n  __assert_kind_of_array__(value, message = null) {\n    this.__assert_equal__(\"array\", typeof value, message)\n  },\n\n  __assert_kind_of_hash__(value, message = null) {\n    this.__assert_equal__(\"object\", typeof value, message)\n  },\n\n  __assert_kind_of_object__(value, message = null) {\n    this.__assert_equal__(\"object\", typeof value, message)\n  },\n\n  __assert_nonzero__(v, message = \"divided by 0\") {\n    this.__assert__(v !== 0, message)\n  },\n\n  // private\n\n  __assert_show__(message = null) {\n    message ??= \"Assertion failed\"\n    if (typeof window !== 'undefined') {\n      alert(message)\n    } else {\n      throw new Error(message)\n    }\n    debugger\n  },\n}\n"],"mappings":"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"}