{"version":3,"file":"xhash.js","names":["_lodash","_interopRequireDefault","require","_xobject","obj","__esModule","Xhash","hash_count","hash","Object","values","length","hash_compact","_","reduce","a","val","key","hash_compact_blank","Xobject","present_p","hash_delete","value","hash_extract_self","_this","result","_len","arguments","keys","Array","_key","forEach","hash_slice","_len2","_key2","exports"],"sources":["../src/xhash.js"],"sourcesContent":["import _ from \"lodash\"\nimport { Xobject } from \"./xobject.js\"\n\nexport const Xhash = {\n  // hash_count({a: 1}) => 1\n  hash_count(hash) {\n    return Object.values(hash).length\n  },\n\n  // {a: 1, b: null, c:undefined, d: \"\"} => {a: 1, d: \"\"}\n  hash_compact(hash) {\n    return _.reduce(hash, (a, val, key) => {\n      if (val == null) {\n      } else {\n        a[key] = val\n      }\n      return a\n    }, {})\n  },\n\n  // {a: 1, b: null, c:undefined, d: \"\"} => {a: 1}\n  hash_compact_blank(hash) {\n    return _.reduce(hash, (a, val, key) => {\n      if (Xobject.present_p(val)) {\n        a[key] = val\n      }\n      return a\n    }, {})\n  },\n\n  // const hash = { a: 1, b: 1, }\n  // const value = Xhash.hash_delete(hash, \"a\")\n  // hash  // => {b: 1}\n  // value // => 1\n  hash_delete(hash, key) {\n    const value = hash[key]\n    delete hash[key]\n    return value\n  },\n\n  // const hash = { a: 1, b: null, c: 1, }\n  // const value = Xhash.hash_extract_self(hash, \"a\", \"b\", \"d\")\n  // expect(hash).toEqual({c: 1})\n  // expect(value).toEqual({a: 1, b: null})\n  hash_extract_self(hash, ...keys) {\n    const result = {}\n    keys.forEach(key => {\n      if (key in hash) {\n        result[key] = this.hash_delete(hash, key)\n      }\n    })\n    return result\n  },\n\n  // const hash = { a: 1, b: null, c: 1, }\n  // const value = Xhash.hash_slice(hash, \"a\", \"b\", \"d\")\n  // expect(hash).toEqual({ a: 1, b: null, c: 1, })\n  // expect(value).toEqual({a: 1, b: null})\n  hash_slice(hash, ...keys) {\n    const result = {}\n    keys.forEach(key => {\n      if (key in hash) {\n        result[key] = hash[key]\n      }\n    })\n    return result\n  },\n}\n"],"mappings":";;;;;;AAAA,IAAAA,OAAA,GAAAC,sBAAA,CAAAC,OAAA;AACA,IAAAC,QAAA,GAAAD,OAAA;AAAsC,SAAAD,uBAAAG,GAAA,WAAAA,GAAA,IAAAA,GAAA,CAAAC,UAAA,GAAAD,GAAA,gBAAAA,GAAA;AAE/B,IAAME,KAAK,GAAG;EAEnBC,UAAU,WAAAA,WAACC,IAAI,EAAE;IACf,OAAOC,MAAM,CAACC,MAAM,CAACF,IAAI,CAAC,CAACG,MAAM;EACnC,CAAC;EAGDC,YAAY,WAAAA,aAACJ,IAAI,EAAE;IACjB,OAAOK,kBAAC,CAACC,MAAM,CAACN,IAAI,EAAE,UAACO,CAAC,EAAEC,GAAG,EAAEC,GAAG,EAAK;MACrC,IAAID,GAAG,IAAI,IAAI,EAAE,CACjB,CAAC,MAAM;QACLD,CAAC,CAACE,GAAG,CAAC,GAAGD,GAAG;MACd;MACA,OAAOD,CAAC;IACV,CAAC,EAAE,CAAC,CAAC,CAAC;EACR,CAAC;EAGDG,kBAAkB,WAAAA,mBAACV,IAAI,EAAE;IACvB,OAAOK,kBAAC,CAACC,MAAM,CAACN,IAAI,EAAE,UAACO,CAAC,EAAEC,GAAG,EAAEC,GAAG,EAAK;MACrC,IAAIE,gBAAO,CAACC,SAAS,CAACJ,GAAG,CAAC,EAAE;QAC1BD,CAAC,CAACE,GAAG,CAAC,GAAGD,GAAG;MACd;MACA,OAAOD,CAAC;IACV,CAAC,EAAE,CAAC,CAAC,CAAC;EACR,CAAC;EAMDM,WAAW,WAAAA,YAACb,IAAI,EAAES,GAAG,EAAE;IACrB,IAAMK,KAAK,GAAGd,IAAI,CAACS,GAAG,CAAC;IACvB,OAAOT,IAAI,CAACS,GAAG,CAAC;IAChB,OAAOK,KAAK;EACd,CAAC;EAMDC,iBAAiB,WAAAA,kBAACf,IAAI,EAAW;IAAA,IAAAgB,KAAA;IAC/B,IAAMC,MAAM,GAAG,CAAC,CAAC;IAAA,SAAAC,IAAA,GAAAC,SAAA,CAAAhB,MAAA,EADQiB,IAAI,OAAAC,KAAA,CAAAH,IAAA,OAAAA,IAAA,WAAAI,IAAA,MAAAA,IAAA,GAAAJ,IAAA,EAAAI,IAAA;MAAJF,IAAI,CAAAE,IAAA,QAAAH,SAAA,CAAAG,IAAA;IAAA;IAE7BF,IAAI,CAACG,OAAO,CAAC,UAAAd,GAAG,EAAI;MAClB,IAAIA,GAAG,IAAIT,IAAI,EAAE;QACfiB,MAAM,CAACR,GAAG,CAAC,GAAGO,KAAI,CAACH,WAAW,CAACb,IAAI,EAAES,GAAG,CAAC;MAC3C;IACF,CAAC,CAAC;IACF,OAAOQ,MAAM;EACf,CAAC;EAMDO,UAAU,WAAAA,WAACxB,IAAI,EAAW;IACxB,IAAMiB,MAAM,GAAG,CAAC,CAAC;IAAA,SAAAQ,KAAA,GAAAN,SAAA,CAAAhB,MAAA,EADCiB,IAAI,OAAAC,KAAA,CAAAI,KAAA,OAAAA,KAAA,WAAAC,KAAA,MAAAA,KAAA,GAAAD,KAAA,EAAAC,KAAA;MAAJN,IAAI,CAAAM,KAAA,QAAAP,SAAA,CAAAO,KAAA;IAAA;IAEtBN,IAAI,CAACG,OAAO,CAAC,UAAAd,GAAG,EAAI;MAClB,IAAIA,GAAG,IAAIT,IAAI,EAAE;QACfiB,MAAM,CAACR,GAAG,CAAC,GAAGT,IAAI,CAACS,GAAG,CAAC;MACzB;IACF,CAAC,CAAC;IACF,OAAOQ,MAAM;EACf;AACF,CAAC;AAAAU,OAAA,CAAA7B,KAAA,GAAAA,KAAA"}